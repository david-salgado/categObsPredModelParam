% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/computeRunningEstim.R
\name{computeRunningEstim}
\alias{computeRunningEstim}
\title{Return a \linkS4class{data.table}) with the sum of desing weights that remain
to be explained, according to the number of edited units.}
\usage{
computeRunningEstim(
  edPriority,
  data,
  levelsTargetVar,
  targetVar,
  id.vars,
  varPriority,
  designWeight,
  suffix = "_ed"
)
}
\arguments{
\item{edPriority}{mesh of points to calculate the pseudo relative bias. These values 
represent the number of edited units.}

\item{data}{data frame, list or environment (or object coercible by
\code{as.data.table} to a \linkS4class{data.table}) containing the variables
in the model (see 'Details').}

\item{levelsTargetVar}{every values of the regresand (an object of class character).}

\item{targetVar}{name of the regressand (an object of class character).}

\item{id.vars}{names of the identification variables for each unit in the
input data set \code{data}.}

\item{varPriority}{variable with the priority of the unit.}

\item{designWeight}{an object of class character containing the design weight.}

\item{suffix}{parameter for the name of the edited version of the variable under analysis.}
}
\value{
\linkS4class{data.table} with three columns: 
\code{targetVar} with the values of regressand, estim with the sum of desing weights 
that remain to be explained, according to the number of edited units (variable edPriority).
}
\description{
\code{computeRunningEstim} computes the sum of design weights
for every value in \code{edPriority}, according to the following procedure:
In each row of the returning \linkS4class{data.table}), the variable edPriority
indicates the number of edited units. The variable estim contains the sum of 
design weights without taking into account design weights of edited units. 
They are set to 0.
}
\examples{

\dontrun{
 fitPar <- new(Class = 'fitParam',
  edData = FFall_AS.StQ, rawData = FGall_AS.StQ, 
  selParam = list(ntreeTry=1000, stepFactor=2, improve=0.05, 
                  trace=TRUE, plot=TRUE, doBest = TRUE, 
                  ptrain = 0.8, DD = DDactu),
                  valParam = list(edEffInd = effInd, priorBin = 5, 
                  dataVal = c('Train','Test')))
                  
 ObsPredPar1 <- new(Class = 'categObsPredModelParam',
                  Data = FGall_AS.StQ,
                  VarRoles = list(Units = IDUnits,
                  Domains = character(0),
                  DesignW = DesignW,
                  Regressands = Regressands,
                  Regressors = Regressors
                  ))
                  
ObsPredPar1 <-  fitModels(ObsPredPar1, fitPar, na.as.category)
ObsPredPar1 <- computeVal(ObsPredPar1, fitPar, na.as.category)
 # computeVal calls computeEdEfficiency calls (computeRunningEstim and effInd)
}

}
