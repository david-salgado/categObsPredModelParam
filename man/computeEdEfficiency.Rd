% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/computeEdEfficiency.R
\name{computeEdEfficiency}
\alias{computeEdEfficiency}
\title{Return a \linkS4class{list} with the global efficiency indicator and modelfits
for prior probabilities.}
\usage{
computeEdEfficiency(
  data,
  targetValue,
  edEffIndicator,
  id.vars,
  varPriority,
  designWeight,
  globalIndicator,
  priorBin = 50,
  suffix
)
}
\arguments{
\item{data}{data frame, list or environment (or object coercible by
\code{as.data.table} to a \linkS4class{data.table}) containing the variables
in the model (see 'Details').}

\item{targetValue}{value of the regressand (an object of class character).}

\item{edEffIndicator}{efficiency indicator to evaluate the ordering given by the model}

\item{id.vars}{names of the identification variables for every unit in the
input data set \code{data}.}

\item{varPriority}{variable with the priority of the unit.}

\item{designWeight}{an object of class character containing the design weight.}

\item{globalIndicator}{indicator for all the data at once.}

\item{priorBin}{number of units in which the data is divided to construct the mesh of points
to calculate the efficiency indicator.}

\item{suffix}{parameter for the name of the edited version of the variable under analysis.}

\item{...}{extra arguments to be used to form the default control argument.}
}
\value{
\linkS4class{list} with model fits for prior probabilities, description of 
the model to be fitted, value of the regressand and global efficiency indicator obtained 
for this specific value of the regressand.
}
\description{
\code{computeEdEfficiency} computes model fits for prior probabilities 
and the global efficiency indicator for a specific value of the regressand and a 
specific formula.
}
\examples{

\dontrun{
 fitPar <- new(Class = 'fitParam',
  edData = FFall_AS.StQ, rawData = FGall_AS.StQ, 
  selParam = list(ntreeTry=1000, stepFactor=2, improve=0.05, 
                  trace=TRUE, plot=TRUE, doBest = TRUE, 
                  ptrain = 0.8, DD = DDactu),
                  valParam = list(edEffInd = effInd, priorBin = 5, 
                  dataVal = c('Train','Test')))
                  
 ObsPredPar1 <- new(Class = 'categObsPredModelParam',
                  Data = FGall_AS.StQ,
                  VarRoles = list(Units = IDUnits,
                  Domains = character(0),
                  DesignW = DesignW,
                  Regressands = Regressands,
                  Regressors = Regressors
                  ))
                  
ObsPredPar1 <-  fitModels(ObsPredPar1, fitPar, na.as.category)
ObsPredPar1 <- computeVal(ObsPredPar1, fitPar, na.as.category)
# computeVal calls computeEdEfficiency calls (computeRunningEstim and effInd)
}

}
