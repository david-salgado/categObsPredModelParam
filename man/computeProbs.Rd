% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/computeProbs.R
\name{computeProbs}
\alias{computeProbs}
\alias{computeProbs,categObsPredModelParam,logical-method}
\title{Compute error probabilities according to the error model and 
units ordered by priority}
\usage{
computeProbs(object, na.as.category)

\S4method{computeProbs}{categObsPredModelParam,logical}(object, na.as.category = FALSE)
}
\arguments{
\item{object}{Object of class \linkS4class{categObsPredModelParam}.}

\item{na.as.category}{logical with default to \code{FALSE} to deal with NA values in the model. 
If \code{TRUE} the missing values are treated as a new category.}
}
\value{
A \linkS4class{categObsPredModelParam} with  the new slot probs with the following columns:

\enumerate{

\item Identification variables for each unit in the input data set

\item One per regressor 

\item Error probabilities

\item The priority based on error probabilities for each of units

\item Error moments

\item The priority based on error moments for each of units


}
}
\description{
Compute error probabilities according to the error model and 
units ordered by priority
}
\examples{
\dontrun{
object <- readRDS("R:/USIE/Proyecto_DepSel_VarQual/categ_RF_simulacion/PC/RDS/ObsPredPar1.rds")
poolDD <- getDD(object@Data)
regressors <- getRegressors(object)  
targetVars <- getRegressands(object)
id.vars <- object@VarRoles$Units  
vars <- c(id.vars,targetVars,regressors)
data.dt <- object@Test$data
data.dt[c(1:3,10:16), NivelEstudios_35._2.1.4.:= NA ] 
data.dt[c(4:7,17:22), Edad_05._2.1.5.1.:= NA]        
# Provocamos un nivel distinto en "SitEmpleo_35._2.1.5.1._"  
data.dt[c(30:49), SitEmpleo_35._2.1.5.1._ := rep(c('8', '9'), 10)] 
data.dt[c(23:35), Sexo_04._2.1.5.1. := '4'] 
data.StQ <- melt_StQ(data.dt[,..vars], poolDD)
object@Data <- data.StQ
object2 <- computeProbs(object)
  
  # Dividimos el conjunto de datos en tres: 
  # (i) con missing en alguna variable numÃ©rica, 
  # (ii) con niveles nuevos en alguna variable categÃ³rica
  # (iii) el resto, donde se imputa NAs a valor *
  # (i) y (ii) se imputan probError a 1
  # (iii) se aplica el modelo ajustado y se computan probabilidades
  # Se vuelven a combinar los datsets y se computan momentos de error y prioridades

  # Provocamos missing en  "NivelEstudios_35._2.1.4." y "Edad_05._2.1.5.1."  
currentData.dt[c(1:3,10:16), NivelEstudios_35._2.1.4.:=NA] 
currentData.dt[c(4:7,17:22), Edad_05._2.1.5.1.:=NA]        
  # Provocamos un nivel distinto en "SitEmpleo_35._2.1.5.1._"  
currentData.dt[c(30:49), SitEmpleo_35._2.1.5.1._:='8'] 
}

}
